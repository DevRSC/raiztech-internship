import Head from "next/head";
import { useCallback, useEffect, useState } from "react";

import Navbar from "@/components/Navbar";
import SearchFilter from "@/components/SearchFilter";
import Table from "@/components/Table";
import Pagination from "@/components/Pagination";

interface Country {
  index: number;
  name: string;
  region: string;
  area: number;
}

export async function getServerSideProps() {
  const data = await fetch(
    "https://restcountries.com/v2/all?fields=name,region,area"
  ).then((res) => res.json());

  const formattedData = data.map((country: Country, index: number) => ({
    index: index + 1,
    name: country.name,
    region: country.region,
    area: country.area === undefined ? 0 : country.area,
  }));

  return {
    props: {
      countries: formattedData,
    },
  };
}

export default function Home(props: { countries: Country[] }) {
  const [countries, setCountries] = useState<Country[]>([]);
  const [filteredCountries, setFilteredCountries] = useState<Country[]>([]);
  const [search, setSearch] = useState<string>("");
  const [countriesPerPage] = useState<number>(10);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [maxPage, setMaxPage] = useState<number>(1);
  const [sort, setSort] = useState<boolean>();

  console.log("Rerendered!");

  useEffect(() => {
    setMaxPage(Math.ceil(filteredCountries.length / countriesPerPage));
  }, [filteredCountries, countriesPerPage]);

  useEffect(() => {
    setCountries(props?.countries);
    setFilteredCountries(props?.countries);
  }, [props.countries]);

  // View all countries

  const viewAllCountries = () => {
    setFilteredCountries(countries);
    setSearch("");
    setCurrentPage(1);
  };

  //Search Filter

  const filterData = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      const searchTerm = e.target.value.toLowerCase();
      setSearch(searchTerm);

      if (searchTerm === "") {
        setFilteredCountries(countries);
      } else {
        const filteredData = countries.filter((country) =>
          country.name.toLowerCase().includes(searchTerm)
        );

        setFilteredCountries(filteredData);
        setCurrentPage(1); // Reset current page when search term changes
      }
    },
    [countries]
  );

  //Filter by area function

  const filterByArea = useCallback(
    (e: React.MouseEvent<HTMLButtonElement>) => {
      const searchedCountry = search.toLowerCase();

      //if no search return
      if (searchedCountry === "") {
        return;
      } else {
        //searched country area if not found return the area of the first country
        const searchedCountryArea =
          countries.find(
            (country) => country.name.toLowerCase() === searchedCountry
          )?.area || filteredCountries[0].area;

        //if no country is found, return
        if (searchedCountryArea === undefined) {
          return;
        }

        //filter countries that are smaller or equal to the searched country area
        const filteredData = countries.filter(
          (country) => country.area <= searchedCountryArea
        );

        //sort filtered countries by area biggest to smallest
        const sortedData = filteredData.sort((a, b) => b.area - a.area);
        setFilteredCountries(sortedData);

        setCurrentPage(1);
      }
    },
    [search, countries, filteredCountries]
  );

  // Pagination Logic
  const indexOfLastCountry = currentPage * countriesPerPage;
  const indexOfFirstCountry = indexOfLastCountry - countriesPerPage;

  const currentCountries =
    filteredCountries.length > 0
      ? filteredCountries.slice(indexOfFirstCountry, indexOfLastCountry)
      : countries.slice(indexOfFirstCountry, indexOfLastCountry);

  const pageNumbers = [];
  for (let i = 1; i <= Math.ceil(countries.length / countriesPerPage); i++) {
    pageNumbers.push(i);
  }

  //Sort by name function
  const sortByName = () => {
    const sortedData = filteredCountries.sort((a, b) => {
      if (a.name < b.name) {
        return -1;
      }
      if (a.name > b.name) {
        return 1;
      }
      return 0;
    });

    if (sort) {
      setFilteredCountries(sortedData.reverse());
      setSort(false);
    } else {
      setFilteredCountries(sortedData);
      setSort(true);
    }

    setCurrentPage(1);
  };

  //a bit of prop drilling here

  const getFilteredRegion = (region: string) => {
    //filter countries by region
    const filteredData = countries.filter(
      (country) => country.region === region
    );

    setFilteredCountries(filteredData);

    setCurrentPage(1);
  };

  return (
    <>
      <Head>
        <title>Country Visualizer</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/logo.png' />
      </Head>
      <div className='min-h-screen dark:bg-gray-800'>
        <section className='container mx-auto px-4'>
          <Navbar />
          <SearchFilter
            viewAll={viewAllCountries}
            getFilteredRegion={getFilteredRegion}
            search={search}
            filterData={filterData}
            filterButton={filterByArea}
          />
          <Table countries={currentCountries} sortByName={sortByName} />
          <Pagination
            currentPage={currentPage}
            maxPage={maxPage}
            paginate={(pageNumber: number) => setCurrentPage(pageNumber)}
          />
        </section>
      </div>
    </>
  );
}
